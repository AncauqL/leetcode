class Solution {
public:
    int xorOperation(int n, int start) {
        vector<int> nums(n);
        for (int i=0;i<n;i++)
            nums[i]=start+2*i;
        for(int i=0;i<n-1;i++){
            nums[i+1]=nums[i]^nums[i+1];
        }
        return nums[n-1];
    }
};
// 1.异或相关知识:
// 按位异或运算
// 按位异或运算是数学或者计算机中运用到的数据处理的方法。感觉是一种思路，当然也是运用到了他的原理。

// 异或运算
// 首先异或表示当两个数的二进制表示，进行异或运算时，当前位的两个二进制表示不同则为1 ，相同则为0. 改方法被广泛用来统计一个数的1的位数。

// 即：
// 0 ^ 0 = 0 ,
// 0 ^ 1 = 1,
// 1 ^ 0 = 1 ,
// 1 ^ 1 = 0 ,
// 按位异或的3个特点：
// 1.） 0 ^ 0 = 0 , 0 ^ 1 = 1, 0异或任何数=任何数。
// 2.）1 ^ 0 = 1 , 1 ^ 1 = 0 , 1异或任何数=任何数取反。
// 3.）任何数异或自己 = 把自己置0。

// 按位异或的几个常见用途：
// (1) 使某些特定的位翻转
// 例如对数10100001的第2位和第3位翻转，则可以将该数与00000110进行按位异或运算。
// 　　　　　 10100001^00000110 = 10100111

// (2) 实现两个值的交换，而不必使用临时变量。
// 例如交换两个整数a=10100001，b=00000110的值，可通过下列语句实现：
// 　　　　a = a^b； 　　//a=10100111
// 　　　　b = b^a； 　　//b=10100001
// 　　　　a = a^b； 　　//a=00000110
// 2.class Solution {
// public:
//     int xorOperation(int n, int start) {
//       int ans;
//       for(int i=0;i<n;i++){
//         ans ^= start +2 * i;
//       }
//       return ans;
// };
// 原题解简化版